https://leetcode.com/problems/maximum-subarray/


public static int maxSubarraySum(int[] arr) {
        int maxi = Integer.MIN_VALUE; // maximum sum\
        int n=arr.length;
        for (int i = 0; i < n; i++) {
            for (int j = i; j < n; j++) {
                // subarray = arr[i.....j]
                int sum = 0;

                //add all the elements of subarray:
                for (int k = i; k <= j; k++) {
                    sum += arr[k];
                }

                maxi = Math.max(maxi, sum);
            }
        }

        return maxi;
    }


#######################################################################


i: Chooses the starting index of the subarray.

j: Chooses the ending index (starting from i).

k: Goes from i to j to calculate the actual sum of the current subarray.

The outer two loops (i, j) generate all possible subarrays.

The innermost loop (k) is needed to calculate the sum of each subarray.
