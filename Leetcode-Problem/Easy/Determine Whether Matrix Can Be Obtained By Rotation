https://leetcode.com/problems/determine-whether-matrix-can-be-obtained-by-rotation/


class Solution {
    public static void rotation(int[][] mat, int[][] target) {
        int n=mat.length;
        for(int i=0;i<n;i++){
            for(int j=0;j<i;j++){
                int temp=mat[i][j];
                mat[i][j]=mat[j][i];
                mat[j][i]=temp;
            }
        }
        int start=0;
        int end=mat.length-1;
        while(start<=end){
            for(int row=0; row<mat.length; row++){
                int temp=mat[row][start];
                mat[row][start]=mat[row][end];
                mat[row][end]=temp;
            }
            start++;
            end--;
        }
    }

    static boolean check(int[][] mat,int[][] target){
        for(int i=0;i<mat.length;i++){
            for(int j=0;j<mat.length;j++){
                if(mat[i][j] != target[i][j]){
                    return false;
                }
            }
        }
        return true;
    }

    public boolean findRotation(int[][] mat,int[][] target){
        for(int i=0;i<4;i++){
            if(check(mat,target)){
                return true;
            }
            rotate(mat);
        }

        return false;
    }
}

##########################################################

first create 2 function check will check 2 passed matrix and return boolean , rotate will transpose the lower part and 
swap it with upper part of the matrix and afterwards it swaps the left side with right side of the matrix which will 
automatically rotate the matrix. now check for all 4 sides match after each rotate.
