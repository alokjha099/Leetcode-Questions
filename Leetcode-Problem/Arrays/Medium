Question Link ## https://leetcode.com/problems/set-matrix-zeroes/

Explanation ## 
The solution modifies the matrix in-place without using additional memory for marking positions, other than two flags for tracking changes in the first row and column.

Identify Zeroes: Traverse through each element in the matrix. If an element is 0, mark its row and column by setting the first element of that row and column to 0.

If 0 is in the first row, set firstRow to true.
If 0 is in the first column, set firstCol to true.
Zero Out Matrix Based on Marks: After the initial traversal, use the marks in the first row and column to set the appropriate elements in the inner matrix to 0.

Handle First Row and Column: If the first row or column initially contained a 0, set the entire first row or column to 0.

Solution ## 

package leetcode.medium;

import java.util.HashSet;
import java.util.Set;

/**
 * Created by nikoo28 on 2019-07-21 15:15
 */

class SetMatrixZeroes {

  public void setZeroes(int[][] matrix) {
    boolean firstRow = false, firstCol = false;

    // Set markers in first row and first column
    for (int i = 0; i < matrix.length; i++)
      for (int j = 0; j < matrix[0].length; j++)
        if (matrix[i][j] == 0) {
          if (i == 0) firstRow = true;
          if (j == 0) firstCol = true;
          matrix[0][j] = 0;
          matrix[i][0] = 0;
        }

    // Replace inner matrix
    for (int i = 1; i < matrix.length; i++)
      for (int j = 1; j < matrix[0].length; j++)
        if (matrix[i][0] == 0 || matrix[0][j] == 0)
          matrix[i][j] = 0;

    // Last remaining checks
    if (firstRow)
      for (int j = 0; j < matrix[0].length; j++)
        matrix[0][j] = 0;

    if (firstCol)
      for (int i = 0; i < matrix.length; i++)
        matrix[i][0] = 0;
  }
}



