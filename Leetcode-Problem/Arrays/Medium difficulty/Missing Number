https://leetcode.com/problems/missing-number/description/ 


class Solution {
  public  int missingNumber(int[] arr){

        int j=0;
        while (j<arr.length){
            int correct=arr[j];
            if(arr[j]<arr.length && arr[j]!=arr[correct]){
                swap(arr,j,correct);
            }else{
                j++;
            }
        }

        for (int i = 0; i < arr.length; i++) {
            if(i!=arr[i]){
                return i;
            }
        }

        return arr.length;

    }
     void swap(int[] arr,int s,int e){
        int temp=arr[s];
        arr[s]=arr[e];
        arr[e]=temp;
    }
}  

# we use cyclic sort in this where we check if number is present at correct index if not swap with correct index and since we start from 0 correct is changed and if N is encountered just ignore it and carry on 
then check which number is missing if no number is missing then the Nth number is missing 
