https://leetcode.com/problems/first-missing-positive/description/

class Solution {
    public int firstMissingPositive(int[] arr) {
       int i=0;
        while(i<arr.length){
            int correct=arr[i]-1;
            if(arr[i]>0 && arr[i] <= arr.length &&  arr[i]!=arr[correct] ){
                swap(arr,i,correct);
            }else{
                i++;
            }
        }

        for (int j = 0; j < arr.length; j++) {
            if(arr[j]!=j+1){
                return j+1;
            }
        }
        return arr.length+1;
    }

     void swap(int[] arr,int s,int e){
        int temp=arr[s];
        arr[s]=arr[e];
        arr[e]=temp;
    }
} 

# this is a similar example to find the diappeared number in cyclic sort just that it has negative so we have to add one everywhere 
