https://leetcode.com/problems/h-index/?envType=study-plan-v2&envId=top-interview-150

QUESTION LINK


class Solution {
    public int hIndex(int[] n) {
        int citcount=0;
        int curcit=0;
        int i=0;
        int maxcit=0;

        while(curcit<=n.length){
            if(i==n.length){
                i=i%n.length;
                curcit++;
                citcount=0;
            }
            if(n[i]>=curcit){
                citcount++;
            }
            i++;
            if(citcount>=curcit){
                maxcit=curcit;
                curcit++;
                citcount=0;
                i=0;
            }
        }
        return maxcit;
    }
}

# brute force approch where I make sure that while current citation does not reach the end it goes on and count the citations of each current citation and increment 
the max citation based on each successful citation make and reset the i and citation count after each succeful max citation incremation however this beats only 5% 
of runtime code 


class Solution {
    public int hIndex(int[] n) {
       int[] arr=new int[n.length+1];
       for(int c:n){
        if(c>n.length){
            arr[n.length]++;
        }else{
            arr[c]++;
        }
         
    }
    int count=0;
    for(int i=n.length;i>=0;i--){
        count=count+arr[i];
        if(count>=i){
            return i;
        }
       }
    return 0;
      
    }
}

# this is an optimised approch where I make an array and increase the positions in that with n and if value is more than n I just increment the last value that 
number of times and then count from end to get the max value if matched that would automatically be the maximum value and we keep on adding the previous count into 
it for better performance 
