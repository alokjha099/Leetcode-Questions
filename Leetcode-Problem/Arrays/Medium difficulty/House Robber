question link ## https://leetcode.com/problems/house-robber/

This Java code solves the House Robber problem using Dynamic Programming (DP). The problem requires determining the maximum amount of money that can be robbed from houses, given that adjacent houses cannot be robbed.

Step-by-Step Explanation
1. Handle Edge Case
java
Copy code
if (2 > n.length) {
    return n[0];
}
If the input array n has only one house (n.length == 1), the maximum money that can be robbed is simply the value of that house (n[0]).
2. Initialize the DP Array
java
Copy code
int[] dp = new int[n.length];
dp[0] = n[0];
dp[1] = Math.max(n[0], n[1]);
dp[i] represents the maximum money that can be robbed from the first i+1 houses.
Base Cases:
dp[0]: The maximum money from the first house is n[0].
dp[1]: The maximum money from the first two houses is the maximum of n[0] and n[1].
3. Fill the DP Array
java
Copy code
for (int i = 2; i < n.length; i++) {
    dp[i] = Math.max(dp[i - 2] + n[i], dp[i - 1]);
}
For each house i starting from the third house:
Two choices are evaluated:
Rob the current house (n[i]) and add it to the maximum from two houses before (dp[i-2]).
Skip the current house and take the maximum from the previous house (dp[i-1]).
Take the maximum of these two choices to ensure the optimal solution.
4. Return the Final Result
java
Copy code
return dp[n.length - 1];
The last element of the dp array (dp[n.length - 1]) contains the maximum money that can be robbed from all houses.
Key Intuition
This problem is solved using the concept of optimal substructure:

At each house i, the solution depends on whether we rob this house or not:
If we rob the house, we add its value to the optimal solution of all houses up to i-2.
If we skip the house, we take the optimal solution of all houses up to i-1.
This leads to a bottom-up DP approach where we calculate the solution incrementally for each house.

Example Walkthrough
Example 1:
Input:

java
Copy code
n = [2, 7, 9, 3, 1]
Execution:

Initialization:

dp[0] = 2 (Rob the first house).
dp[1] = Math.max(2, 7) = 7 (Rob the second house).
DP Iterations:

For i = 2:
dp[2] = Math.max(dp[0] + n[2], dp[1]) = Math.max(2 + 9, 7) = 11
For i = 3:
dp[3] = Math.max(dp[1] + n[3], dp[2]) = Math.max(7 + 3, 11) = 11
For i = 4:
dp[4] = Math.max(dp[2] + n[4], dp[3]) = Math.max(11 + 1, 11) = 12
Result:

dp = [2, 7, 11, 11, 12]
Maximum money that can be robbed: 12.
Output:

java
Copy code
12
Time Complexity
O(n): The solution iterates through the array once.
Space Complexity
O(n): A dp array of size n is used.
Optimized Space Complexity Solution
The dp array can be optimized to use only two variables since each dp[i] depends only on dp[i-1] and dp[i-2].
Optimized code:

java
Copy code
public int rob(int[] n) {
    if (n.length == 1) return n[0];

    int prev2 = n[0];
    int prev1 = Math.max(n[0], n[1]);

    for (int i = 2; i < n.length; i++) {
        int curr = Math.max(prev2 + n[i], prev1);
        prev2 = prev1;
        prev1 = curr;
    }

    return prev1;
}
Space Complexity: O(1).
Example Input and Output
Example 1:
Input:

java
Copy code
n = [1, 2, 3, 1]
Output:

java
Copy code
4
Explanation: Rob houses 1 and 3 (1 + 3 = 4).

Example 2:
Input:

java
Copy code
n = [2, 7, 9, 3, 1]
Output:

java
Copy code
12
Explanation: Rob houses 1, 3, and 5 (2 + 9 + 1 = 12).
