https://leetcode.com/problems/jump-game-ii/submissions/1496197089/?envType=study-plan-v2&envId=top-interview-150

QUESTION LINK

class Solution {
    public int jump(int[] n) {
        int destination=n.length-1;
        int lastIndex=0;
        int coverage=0;
        int totaljump=0;
        if(n.length==1) return 0;

        for(int i=0;i<n.length;i++){
            coverage=Math.max(coverage,i+n[i]);

            if(i==lastIndex){
                lastIndex=coverage;
                totaljump++;

                if(coverage>=destination){
                    return totaljump;
                }

            }
        }
        return totaljump;
    }
    
}

# one of the most tricy , coverage keeps the farthest you can reach by comparing each ith position farthest reach and lastindex keeps count of the ith position 
explored and has it reached all the maximum no of (i+n[i]) combinations or not 
